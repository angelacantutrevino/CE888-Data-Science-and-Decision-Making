# Question 1: Write a function list_to_array that receives a list as a function and returns the list converted into a numpy array
import numpy as np
def list_to_array(myList):
    return np.array(myList)
    
# Question 2: Using numpy, write a function called 'maximum', which takes an array or list of numbers as input and returns the maximum value found in them.
import numpy as np
def maximum(numbers):
    return np.amax(numbers)

# Question 3: Using numpy, write a function called 'percentile', which takes as input an array or list of numbers and a number between 0-100 (the percentile that the user wants to calculate) and returns the percentile.
import numpy as np
def percentile(numbers, perc):
    return np.percentile(numbers, perc)
    
# Question 4: Using numpy, write a function called 'sorting', which takes as input an array or list of numbers and returns the same numbers sorted in ascending order.
import numpy as np
def sorting(numbers):
    return np.sort(numbers)
    
# Question 5: Using numpy, write a function called 'mean_of_array_columns', which takes as input a 2D array of numbers and returns the column-wise averages of the array.
import numpy as np
def mean_of_array_columns(numbers):
    return np.mean(numbers, axis=0) # Axis=0 is assumed as a column
    
# Question 6: Using numpy, write a function called 'stdev_array_rows', which takes as input a 2D array of numbers and returns the row-wise standard deviations of the array.
import numpy as np
def stdev_array_rows(numbers):
    return np.std(numbers, axis=1) # Axis=1 is assumed as a row
    
# Question 7: We're going to use numpy to generate random numbers. Check the documentation for numpy.random.choice() to complete the functions below.
import numpy as np
def action_0():
    ''' This should return 1 with probability 50%, and 0 with probability 50%'''
    return np.random.choice([1,0],p=[0.5,0.5])
def action_1():
    ''' This should return 1 with probability 60%, and 0 with probability 40%'''
    return np.random.choice([1,0],p=[0.6,0.4])
def action_2():
    ''' This should return 1 with probability 20%, and 0 with probability 80%'''
    return np.random.choice([1,0],p=[0.2,0.80])

# Question 8: We're going to use numpy to generate random numbers. Check the documentation for numpy.random.choice() to complete the functions below.
import numpy as np
# Define our actions
def policy():
    # This should return 0 with probability 40%; 1 with probability 10%; or 2 with probability 50%
    return np.random.choice([0,1,2],p=[0.4,0.1,0.5])

# Question 9: We're going to use numpy to generate random numbers. Check the documentation for numpy.random.choice() to complete the functions below.
import numpy as np

def policy(p1, p2, p3, p4=0.5):
    # p1, p2, p3 are, respectively, the probabilities of choosing between 1, 2, and 3
    # the default value for p4 should be 0.5
    # action equals 1 with probability p1, 2 with probability p2, and 3 with probability p3
    action = np.random.choice([1,2,3],p=[p1,p2,p3]) 
    # Depending on the value of 'action', we choose one of the following options:
    # if action is 1: return action1()
    # if action is 2: return action2()
    # if action is 3: return action1() with probability p4, and action2() otherwise
    if action == 1:
        return action1()
    elif action == 2:
        return action2()
    elif action == 3:
        return np.random.choice([action1(),action2()],p=[p4,1-p4])

def action1(p=0.2):
    # Return 0 with probability p and 1 otherwise
    # the default value for p should be 0.2
      return np.random.choice([0,1],p=[p,1-p]) 
    
def action2(p=0.9):
    # Return 3 with probability p and -5 otherwise
    # the default value for p should be 0.9
    return np.random.choice([3,-5],p=[p,1-p]) 
